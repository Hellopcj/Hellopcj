<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒲Annie的博客</title>
  <icon>https://www.gravatar.com/avatar/1b1060c5a2544f4ae03788a00f7c2c93</icon>
  <subtitle>Android开发程序媛，欢迎随时撩我</subtitle>
  <link href="/Hellopcj/atom.xml" rel="self"/>
  
  <link href="https://hellopcj.github.io/Hellopcj/"/>
  <updated>2017-09-22T02:46:54.000Z</updated>
  <id>https://hellopcj.github.io/Hellopcj/</id>
  
  <author>
    <name>蒲Annie_</name>
    <email>litten225@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>photoPostName</title>
    <link href="https://hellopcj.github.io/Hellopcj/2017/09/20/photoPostName/"/>
    <id>https://hellopcj.github.io/Hellopcj/2017/09/20/photoPostName/</id>
    <published>2017-09-20T10:08:08.000Z</published>
    <updated>2017-09-22T02:46:54.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Facebook rebond 弹簧功能源码分析</title>
    <link href="https://hellopcj.github.io/Hellopcj/2017/09/14/rebond/"/>
    <id>https://hellopcj.github.io/Hellopcj/2017/09/14/rebond/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-09-22T02:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家在项目上或多或少的用到了弹簧功能，比较常用和方便的就是facebook的开源库rebond,想要深入的了解这个开源库的使用方法就需要我们源码分析（read the fucking source code！）整个开源库的功能实现。我自己也通过rebond写了个demo 有兴趣的可以下载了解下（代码都有注释 适合菜鸟初学者了解 大神略过）</p><p>废话不多说，下面我们就开始分析源代码（very fucking detailed！）</p><p>（一）rebond的配置</p><p>  在gradle 进行配置： </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line"><span class="keyword">compile</span> <span class="string">'com.facebook.rebound:rebound:0.3.8'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  或者maven部署rebond库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.facebook.rebound<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rebound<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><p>这时候我们可以看到rebond的目录结构：</p><p>|– ui<br>|   |– utils （layout的工具类 提供create四个不同参数的layout布局 例如：宽高自适应父类布局等）<br>|   |– SpringConfiguratorView（弹簧（Spring） view 配置器Spring 配置信息 包含Spring张力值0-200 摩擦力0-50）<br>|– AndroidSpringLooperFactory</p><p>|– AnimationQueue<br>|– BaseSpringSystem<br>|– BuildConfig  (包含了开源库rebond的版本信息等)</p><p>|– ChoreographerCompat</p><p>|– OrigamiValueConverter</p><p>|– SimpleSpringListener （实现了SpringLsitener接口）</p><p>|– Spring</p><p>|– SpringChain</p><p>|– SpringConfig</p><p>|– SpringConfigRegistry</p><p>|– SpringListener  （包含Spring 四个运动状态的方法）</p><p>|– SpringLooper</p><p>|– SpringSystem</p><p>|– SpringSystemListener</p><p>|– SpringUtil</p><p>|– SteppingLooper</p><p>|– SynchronousLooper</p><p>整体的结构就是这样的，下面我们来详细的介绍下每个类的作用和功能 以及rebond是怎么运作的</p><p>（二） rebond的每个类的作用</p><ul><li><p>ui文件夹下utils：</p><p>这个不用多说 此类提供创建四种视图布局分别为</p></li></ul><p>createMatchParams();</p><p>createWrapParams();</p><p>createWrapMatchParams();</p><p>createMatchWrapParams();</p><ul><li><p>ui文件夹下SpringConfiguratorView（可省略）</p><p>这个我仔细看了下 发现可能是原demo有个手动滑动设置张力摩擦力的seekbar 这里不需要用到 所以忽略掉</p><p>然而重要的是我们要清楚在Spring中，弹簧的运动轨迹遵循<a href="https://baike.baidu.com/item/胡克定律/2307271?" target="_blank" rel="external">胡克定律</a> 要我们的弹簧能够弹起来需要我们手动设置张力（TENSION）和摩擦力（FRICTION）</p></li></ul><ul><li>SpringConfig</li></ul><p>这里是设置弹簧张力和拉力的类，类中声明Spring的张力和摩擦力，在这个类中我们可以通过调用</p><p>fromOrigamiTensionAndFriction(Tension,Friction)</p><p>方法来设置我们弹簧的张力和拉力，而这会return一个参数经过OrigamiValueConverter转换的SpringConfig对象，假如你想用默认的参数也可以通过直接调用暴露给的静态方法</p><p>SpringConfig.defaultConfig</p><p>，返回的是<code>fromOrigamiTensionAndFriction(40.0D, 7.0D)</code> 既默认40 70</p><ul><li>SpringConfigRegistry</li></ul><p>放置大批量SpringConfig的类库。在SpringConfigRegistry中 声明了一个SpringConfig的map集合，主要的作用就是add和remove SpringConfig 在下文SpringChain会提到</p><ul><li>OrigamiValueConverter</li></ul><p>在SpringConfig中提到，设置张力和摩擦力经过此类进行一个转换，<br>这里代码如下：</p><pre><code>public OrigamiValueConverter() {}public static double tensionFromOrigamiValue(double oValue) {    return oValue == 0.0D?0.0D:(oValue - 30.0D) * 3.62D + 194.0D;}public static double origamiValueFromTension(double tension) {    return tension == 0.0D?0.0D:(tension - 194.0D) / 3.62D + 30.0D;}public static double frictionFromOrigamiValue(double oValue) {    return oValue == 0.0D?0.0D:(oValue - 8.0D) * 3.0D + 25.0D;}public static double origamiValueFromFriction(double friction) {    return friction</code></pre><ul><li>SpringSystem</li></ul><p>SpringSystem 继承于BaseSpringSystem  内部隐藏了它的构造方法，我的需要使用它的静态方法create() ，这个方法自动为我们创建了一个SpringLooper，我们来看看这个方法返回的数据<code>  return new SpringSystem(AndroidSpringLooperFactory.createSpringLooper());</code><br>这也是我们在使用弹簧功能前提，我们需要调用这个方法得到一个弹簧，之后再对这个弹簧进行基本的设置</p><ul><li>AndroidSpringLooperFactory</li></ul><p>在SpringSystem 我们提到，使用rebond时，自动为我们creat一个SpringLooper，此create方法根据API是否&gt;16(4.0) 为界限，自动返回不同的AndroidSpringLooper实例，不同的类又共同继承SpringLooper，也就是说 ，在这个类中，主要的作用就是根据api不同创建不同的AndroidSpringLooper对不同版本进行适配，AndroidSpringLooper 也就是looper，调用的是BaseSpringSystem的 对looper进行的迭代计算器，做的就是不断的更新SpringSystem的状态。</p><ul><li>SpringLooper</li></ul><p>上面说到以4.0为界限分别返回继承SpringLooper的不同的实例，在SpringLooper这个抽象类中，有两个抽象方法start()和stop()，子类根据自身代码来操作Looper的开始和结束需要做的事情，其实主要是调用了BaseSpringSystem的loop方法。</p><ul><li><p>BaseSpringSystem</p><p>在BaseSpringSystem中维护了一个SpringSystemListener数组，可以进行addListener或者removelistner的操作， 并且此类提供了对Spring的注册及初始化，对弹簧运动进行迭代计算，以及loop的迭代计算，可以说  这个类是维护弹簧持续运动计算的一个类 ，概括来说 这个类为我们创建了一个弹簧该有的东西，弹簧的运动监听，弹簧的物理运动， 主要代码如下：</p></li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//loop的迭代计算</span></div><div class="line">  <span class="keyword">public</span> void loop(double ellapsedMillis) &#123;</div><div class="line">      Iterator i$ = <span class="keyword">this</span>.mListeners.iterator();</div><div class="line"></div><div class="line">      SpringSystemListener listener;</div><div class="line">      <span class="keyword">while</span>(i$.hasNext()) &#123;</div><div class="line">          listener = (SpringSystemListener)i$.next();</div><div class="line">          listener.onBeforeIntegrate(<span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.advance(ellapsedMillis);</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.mActiveSprings.isEmpty()) &#123;</div><div class="line">          <span class="keyword">this</span>.mIdle = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      i$ = <span class="keyword">this</span>.mListeners.iterator();</div><div class="line"></div><div class="line">      <span class="keyword">while</span>(i$.hasNext()) &#123;</div><div class="line">          listener = (SpringSystemListener)i$.next();</div><div class="line">          listener.onAfterIntegrate(<span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.mIdle) &#123;</div><div class="line">          <span class="keyword">this</span>.mSpringLooper.stop();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="comment">// Spring 物理运动计算</span></div><div class="line">void advance(double deltaTime) &#123;</div><div class="line">      Iterator i$ = <span class="keyword">this</span>.mActiveSprings.iterator();</div><div class="line">      <span class="keyword">while</span>(i$.hasNext()) &#123;</div><div class="line">          Spring spring = (Spring)i$.next();</div><div class="line">          <span class="keyword">if</span>(spring.systemShouldAdvance()) &#123;</div><div class="line">              spring.advance(deltaTime / <span class="number">1000.0</span>D);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">this</span>.mActiveSprings.remove(spring);</div><div class="line">          &#125;</div></pre></td></tr></table></figure><ul><li>Spring</li></ul><p>当当当当~  这就是我们的弹簧啦，在这个类中详细的计算弹簧运动的物理计算 ：代码有点多。我们可以详细的了解下弹簧的运动过程：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">void advance(double realDeltaTime) &#123;</div><div class="line">       boolean isAtRest = <span class="keyword">this</span>.isAtRest();</div><div class="line">       <span class="keyword">if</span>(!isAtRest || !<span class="keyword">this</span>.mWasAtRest) &#123;</div><div class="line">           double adjustedDeltaTime = realDeltaTime;</div><div class="line">           <span class="keyword">if</span>(realDeltaTime &gt; <span class="number">0.064</span>D) &#123;</div><div class="line">               adjustedDeltaTime = <span class="number">0.064</span>D;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">this</span>.mTimeAccumulator += adjustedDeltaTime;</div><div class="line">           double tension = <span class="keyword">this</span>.mSpringConfig.tension;</div><div class="line">           double friction = <span class="keyword">this</span>.mSpringConfig.friction;</div><div class="line">           double position = <span class="keyword">this</span>.mCurrentState.position;</div><div class="line">           double velocity = <span class="keyword">this</span>.mCurrentState.velocity;</div><div class="line">           double tempPosition = <span class="keyword">this</span>.mTempState.position;</div><div class="line"></div><div class="line">           double dvdt;</div><div class="line">           double tempVelocity;</div><div class="line">           <span class="keyword">for</span>(tempVelocity = <span class="keyword">this</span>.mTempState.velocity; <span class="keyword">this</span>.mTimeAccumulator &gt;= <span class="number">0.001</span>D; velocity += dvdt * <span class="number">0.001</span>D) &#123;</div><div class="line">               <span class="keyword">this</span>.mTimeAccumulator -= <span class="number">0.001</span>D;</div><div class="line">               <span class="keyword">if</span>(<span class="keyword">this</span>.mTimeAccumulator &lt; <span class="number">0.001</span>D) &#123;</div><div class="line">                   <span class="keyword">this</span>.mPreviousState.position = position;</div><div class="line">                   <span class="keyword">this</span>.mPreviousState.velocity = velocity;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               double aAcceleration = tension * (<span class="keyword">this</span>.mEndValue - tempPosition) - friction * velocity;</div><div class="line">               tempPosition = position + velocity * <span class="number">0.001</span>D * <span class="number">0.5</span>D;</div><div class="line">               tempVelocity = velocity + aAcceleration * <span class="number">0.001</span>D * <span class="number">0.5</span>D;</div><div class="line">               double bVelocity = tempVelocity;</div><div class="line">               double bAcceleration = tension * (<span class="keyword">this</span>.mEndValue - tempPosition) - friction * tempVelocity;</div><div class="line">               tempPosition = position + tempVelocity * <span class="number">0.001</span>D * <span class="number">0.5</span>D;</div><div class="line">               tempVelocity = velocity + bAcceleration * <span class="number">0.001</span>D * <span class="number">0.5</span>D;</div><div class="line">               double cVelocity = tempVelocity;</div><div class="line">               double cAcceleration = tension * (<span class="keyword">this</span>.mEndValue - tempPosition) - friction * tempVelocity;</div><div class="line">               tempPosition = position + tempVelocity * <span class="number">0.001</span>D;</div><div class="line">               tempVelocity = velocity + cAcceleration * <span class="number">0.001</span>D;</div><div class="line">               double dAcceleration = tension * (<span class="keyword">this</span>.mEndValue - tempPosition) - friction * tempVelocity;</div><div class="line">               double dxdt = <span class="number">0.16666666666666666</span>D * (velocity + <span class="number">2.0</span>D * (bVelocity + cVelocity) + tempVelocity);</div><div class="line">               dvdt = <span class="number">0.16666666666666666</span>D * (aAcceleration + <span class="number">2.0</span>D * (bAcceleration + cAcceleration) + dAcceleration);</div><div class="line">               position += dxdt * <span class="number">0.001</span>D;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">this</span>.mTempState.position = tempPosition;</div><div class="line">           <span class="keyword">this</span>.mTempState.velocity = tempVelocity;</div><div class="line">           <span class="keyword">this</span>.mCurrentState.position = position;</div><div class="line">           <span class="keyword">this</span>.mCurrentState.velocity = velocity;</div><div class="line">           <span class="keyword">if</span>(<span class="keyword">this</span>.mTimeAccumulator &gt; <span class="number">0.0</span>D) &#123;</div><div class="line">               <span class="keyword">this</span>.interpolate(<span class="keyword">this</span>.mTimeAccumulator / <span class="number">0.001</span>D);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span>(<span class="keyword">this</span>.isAtRest() || <span class="keyword">this</span>.mOvershootClampingEnabled &amp;&amp; <span class="keyword">this</span>.isOvershooting()) &#123;</div><div class="line">               <span class="keyword">if</span>(tension &gt; <span class="number">0.0</span>D) &#123;</div><div class="line">                   <span class="keyword">this</span>.mStartValue = <span class="keyword">this</span>.mEndValue;</div><div class="line">                   <span class="keyword">this</span>.mCurrentState.position = <span class="keyword">this</span>.mEndValue;</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">this</span>.mEndValue = <span class="keyword">this</span>.mCurrentState.position;</div><div class="line">                   <span class="keyword">this</span>.mStartValue = <span class="keyword">this</span>.mEndValue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="keyword">this</span>.setVelocity(<span class="number">0.0</span>D);</div><div class="line">               isAtRest = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           boolean notifyActivate = <span class="literal">false</span>;</div><div class="line">           <span class="keyword">if</span>(<span class="keyword">this</span>.mWasAtRest) &#123;</div><div class="line">               <span class="keyword">this</span>.mWasAtRest = <span class="literal">false</span>;</div><div class="line">               notifyActivate = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           boolean notifyAtRest = <span class="literal">false</span>;</div><div class="line">           <span class="keyword">if</span>(isAtRest) &#123;</div><div class="line">               <span class="keyword">this</span>.mWasAtRest = <span class="literal">true</span>;</div><div class="line">               notifyAtRest = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           Iterator i$ = <span class="keyword">this</span>.mListeners.iterator();</div><div class="line"></div><div class="line">           <span class="keyword">while</span>(i$.hasNext()) &#123;</div><div class="line">               SpringListener listener = (SpringListener)i$.next();</div><div class="line">               <span class="keyword">if</span>(notifyActivate) &#123;</div><div class="line">                   listener.onSpringActivate(<span class="keyword">this</span>);</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               listener.onSpringUpdate(<span class="keyword">this</span>);</div><div class="line">               <span class="keyword">if</span>(notifyAtRest) &#123;</div><div class="line">                   listener.onSpringAtRest(<span class="keyword">this</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p> 这里面详细的定义了弹簧运动的各种东西，比如详细的记录弹簧运动到某个阶段的值（弹簧运动的物理状态）， 运动到某个阶段的弹簧的长度等等 。</p><ul><li><p>ChoreographerCompat（可省略）</p><p>貌似是舞蹈者  舞蹈者就是控制图形动画和ui的类 详细可以看<a href="http://www.jianshu.com/p/996bca12eb1d" target="_blank" rel="external">这篇文章，这里详细的介绍android舞蹈者的作用</a><br>这个类根据Api是否》=16 （4.0） 控制不同api延迟或者立即 post和remove  Choreographer的Callback  这里的运用貌似是在AnimationQuee中用到，但是AnimationQuee 在实际的代码中也并未用到，所以这里可以省略不谈  看别人说好像用AnimationQuee应该是有什么坑，我觉得应该是适配的坑，，。AnimationQuee的介绍也省略</p></li><li><p>SpringChain</p></li></ul><p>SpringChain 顾名思义，Spring连锁（也就是多个Spring的连锁）。如果你想多个view设置弹簧功能的需求，就可以用到SpringChain，SpringChain会从第一个图片开始一个一个得带动下一个图片的运动（如果是单个的话用Spring就可以），在这个类里，给我们提供了一个oncreat（）的静态方法供我们使用，参数依次为主拉力，主摩擦力，辅助拉力，辅助摩擦力，之后我们给每个view通过springChain.addSpring添加到队列中，并且设置SpringListener，最后通过springChain.setControlSpringIndex(0).getControlSpring().setEndValue(0);设置刚开始的弹簧的index  比如一个4个view  第一个先动的是4  那么最后一个就是0  让我们来看看具体的代码：</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 将一个弹簧添加到将返回给所提供侦听器的链中。</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span>  监听SpringChain中的Spring 并且通知更新它</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> this SpringChain for chaining（返回SpringChain的链接）</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="keyword">public</span> SpringChain addSpring(<span class="keyword">final</span> SpringListener listener) &#123;</div><div class="line">   <span class="comment">// We listen to each spring added to the SpringChain and dynamically chain the springs together</span></div><div class="line">   <span class="comment">// whenever the control spring state is modified.</span></div><div class="line">   Spring spring = mSpringSystem</div><div class="line">       .createSpring()</div><div class="line">       .addListener(<span class="keyword">this</span>)</div><div class="line">       .setSpringConfig(mAttachmentSpringConfig);</div><div class="line">   mSprings.add(spring);</div><div class="line">   mListeners.add(listener);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">/ /设置控制弹簧的索引。此弹簧将带动所有弹簧的位置进行运动</span></div><div class="line"><span class="comment">  * Set the index of the control spring. This spring will drive the positions of all the springs</span></div><div class="line"><span class="comment">  * before and after it in the list when moved.</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> i the index to use for the control spring（指针i 用于控制弹簧）</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> this SpringChain</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="keyword">public</span> SpringChain setControlSpringIndex(int i) &#123;</div><div class="line">   mControlSpringIndex = i;</div><div class="line">   Spring controlSpring = mSprings.<span class="keyword">get</span>(mControlSpringIndex);</div><div class="line">   <span class="keyword">if</span> (controlSpring == <span class="literal">null</span>) &#123;</div><div class="line">     <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">for</span> (Spring spring : mSpringSystem.getAllSprings()) &#123;</div><div class="line">     spring.setSpringConfig(mAttachmentSpringConfig);</div><div class="line">   &#125;</div><div class="line">   getControlSpring().setSpringConfig(mMainSpringConfig);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大家在项目上或多或少的用到了弹簧功能，比较常用和方便的就是facebook的开源库rebond,想要深入的了解这个开源库的使用方法就需要我们源码分析（read the fucking source code！）整个开源库的功能实现。我自己也通过rebond写了个demo 有兴趣的可以下载了解下（代码都有注释 适合菜鸟初学者了解 大神略过）&lt;/p&gt;
&lt;p&gt;废话不多说，下面我们就开始分析源代码（very fucking detailed！）&lt;/p&gt;
&lt;p&gt;（一）rebond的配置&lt;/p&gt;
&lt;p&gt;  在gradle 进行配置： &lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.facebook.rebound:rebound:0.3.8&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  或者maven部署rebond库&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.facebook.rebound&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;rebound&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.3.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="源码分析" scheme="https://hellopcj.github.io/Hellopcj/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>超级干货系列 hexo+gihub搭建博客</title>
    <link href="https://hellopcj.github.io/Hellopcj/2017/09/08/a-chrismas-ico/"/>
    <id>https://hellopcj.github.io/Hellopcj/2017/09/08/a-chrismas-ico/</id>
    <published>2017-09-07T16:00:00.000Z</published>
    <updated>2017-09-22T02:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多盆友们都想搭建属于自己的博客，但是想要拥有自己独立的服务器和域名还是蛮麻烦的，既要进行网站备案（还不一定能通过）还要自己搞网页的样式等等。 有了gihub就可以轻松搭建自己的博客。<br>gihub+hexo搭建博客的原理大致是这样的， hexo生成本地静态博客 通过hexo与自己的gihub相关联，将自己的静态博客git到自己的gihub中。通过gihub就可以轻松的查看自己的博客。下面就让我们详细的了解下搭建的步骤：</p><p> 一：准备工作</p><p>  安装node  node的官方网址为：<a href="http://nodejs.cn/download/" target="_blank" rel="external">http://nodejs.cn/download/</a><br>  安装git   git的官方网址：<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br>  将node和git下载下来 无脑下一步即可实现安装</p><p>  测试电脑中node和git是否安装成功在控制台输入以下命令：<br>  git –version<br>  node -v<br>  npm -v<br>  <a id="more"></a><br><img src="/Hellopcj/assets/blogimg/test.png" alt="如果出现下图表示安装成功">    </p><p>二：创建gihub page博客</p><p>在自己的gihub创建一个以自己账户名相同的 repository 创建完毕点击setting 设置page的样式 并且发布<br><img src="/Hellopcj/assets/blogimg/222.png" alt="创建gihub博客页面"><br>此时我们得到了一个默认的gihub博客页面<br><img src="/Hellopcj/assets/blogimg/222.png" alt="默认的博客页面">   </p><p>三：下载安装hexo</p><p>在命令行输入<br>npm install hexo-cli -g<br>等待安装成功  如果出现warn 可尝试<br>sudo npm install -g hexo-cli</p><p>在user下新建一个名为MyBlog的文件（这里一MyBlog为例）利用命令行切换到刚才新建的MyBlog<br>cd ~/MyBlog<br>hexo init MyBlog<br>npm install<br>这时等待hexo初始化到MyBlog文件中<br>此时 ls 我们可以看到文件中有这样的结构<br>|– _config.yml<br>|– package.json<br>|– scaffolds<br>|– source<br>|   |– _drafts<br>|   |– _posts<br>|– themes</p><p>安装hexo server 输入以下命令：<br>sudo npm install hexo-server<br>hexo g<br>hexo server<br>可以看到下图<br><img src="/Hellopcj/assets/blogimg/server.png" alt="本地服务器"><br> 将链接复制到Safari可以看到默认的hexo主题页面</p><p>四：Hexo与gihub相关联</p><p>打开MyBlog文件夹 在主目录中可以找到_config.yml文件 用文本编辑器打开</p><p><img src="/Hellopcj/assets/blogimg/confighexo.png" alt="在最底部找到"><br>将链接换成自己的gihub仓库的地址</p><p>输入命令行<br> npm install hexo-deployer-git –save<br> 将生成静态页面并部署到github的仓库中，执行：<br> hexo g<br> hexo deploy<br> 或者<br> hexo d -g<br> ** INFO Deploy done: git 即上传成功，这时就可以通过gihub仓库 看到本地上传的资源</p><p>五：Hexo的基本配置和Hexo主题样式</p><p>hexo支持多种主题样式，大家可以从<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a> 寻找自己喜欢的主题样式<br>或者从这里找到自己心仪的主题 <a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">https://www.zhihu.com/question/24422335</a><br>博主这里用到的是(litten/hexo-theme-yilia)的主题， 以此为例</p><p>控制台切换到MyBlog文件夹下 输入命令行安装主题：<br>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia<br>安装less，主题使用less作为css预处理工具：<br>npm install hexo-renderer-less –save<br>安装feed生成RSS：<br>npm install hexo-generator-feed –save<br>安装json-content，用于生成静态站点数据，提供搜索功能的数据源：<br>npm install hexo-generator-json-content –save<br>开启标签页：<br>hexo new page tags<br>修改MyBlog/source/tags/index.md的源数据：<br>layout: tags<br>noDate: true<br>comments: false<br>—保存</p><p>修改MyBlog文件夹下（主目录）_Config.yml文件 theme: yilia</p><p>——注意 修改_Config.yml 文件 :后面都必须有一个空格 不然会报错！每个key后面都有一个空格然后再加value——<br>输入命令行<br>hexo clean<br>hexo g<br>hexo deploy<br>将本地修改的文件 上传到gihub上<br>也可以先 hexo server本地查看网站 确认无误后再上传</p><p>六：需要注意的事</p><p>需要注意的事 </p><pre><code>1：修改_Config.yml 文件 :后面都必须有一个空格 不然会报错（重要的事情说三遍）2：发布到gihub发现自己的网页样式缺失  这时候99%的原因是_config.yml 的url和root的路径有问题 除了修改主目录下的——config.yml文件 此外在themes文件夹下 你用到的 样式里面的_config.yml 的root 和url也需要修改[具体如图](/Hellopcj/assets/blogimg/configroot.png)这里面的url是你自己博客的地址 root是在自己项目gihub上存放网页的目录如果还是改不好 可以在Safair调出控制台 查看自己gihub网页的具体结构调出Safari控制台的步骤（在启动Safari的基础上） 点击左侧系统偏好设置&gt;高级  勾选最下方 在菜单栏中显示“开发”菜单回到Gihub blog页面 右键鼠标点击 检查元素 即可查看具体内容</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多盆友们都想搭建属于自己的博客，但是想要拥有自己独立的服务器和域名还是蛮麻烦的，既要进行网站备案（还不一定能通过）还要自己搞网页的样式等等。 有了gihub就可以轻松搭建自己的博客。&lt;br&gt;gihub+hexo搭建博客的原理大致是这样的， hexo生成本地静态博客 通过hexo与自己的gihub相关联，将自己的静态博客git到自己的gihub中。通过gihub就可以轻松的查看自己的博客。下面就让我们详细的了解下搭建的步骤：&lt;/p&gt;
&lt;p&gt; 一：准备工作&lt;/p&gt;
&lt;p&gt;  安装node  node的官方网址为：&lt;a href=&quot;http://nodejs.cn/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.cn/download/&lt;/a&gt;&lt;br&gt;  安装git   git的官方网址：&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;br&gt;  将node和git下载下来 无脑下一步即可实现安装&lt;/p&gt;
&lt;p&gt;  测试电脑中node和git是否安装成功在控制台输入以下命令：&lt;br&gt;  git –version&lt;br&gt;  node -v&lt;br&gt;  npm -v&lt;br&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="https://hellopcj.github.io/Hellopcj/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
